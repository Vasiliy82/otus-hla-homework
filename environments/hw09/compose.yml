services:
  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "postgres"
    volumes:
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-master.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_hw -d hw"]
      interval: 1s
      timeout: 1s
      retries: 30
    deploy:
      resources:
        limits:
          cpus: '1.0'
        reservations:
          cpus: '1.0' 
    networks:
      - app_net

  postgres_slave1:
    image: postgres:latest
    container_name: postgres_slave1
    hostname: postgres_slave1
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "postgres"
    volumes:
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-slave1.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/init-slave.sh:/docker-entrypoint-initdb.d/init.sh
      - postgres-slave1-data:/var/lib/postgresql/data
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5434:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_hw -d hw"]
      interval: 1s
      timeout: 1s
      retries: 30
    deploy:
      resources:
        limits:
          cpus: '1.0'
        reservations:
          cpus: '1.0' 
    networks:
      - app_net

  postgres_slave2:
    image: postgres:latest
    container_name: postgres_slave2
    hostname: postgres_slave2
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "postgres"
    volumes:
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-slave2.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/init-slave.sh:/docker-entrypoint-initdb.d/init.sh
      - postgres-slave2-data:/var/lib/postgresql/data
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5435:5432"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_hw -d hw"]
      interval: 1s
      timeout: 1s
      retries: 30
    deploy:
      resources:
        limits:
          cpus: '1.0'
        reservations:
          cpus: '1.0' 
    networks:
      - app_net
 
  goose:
    container_name: goose
    build:
      context: ./goose
    profiles:
      - migration
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "hw"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./../../backend/migrations:/app/migrations
    networks:
      - app_net
  
  socnet-1:
    container_name: socnet-1
    hostname: socnet-1
    build:
      context: ./../..
      dockerfile: environments/hw09/backend/Dockerfile
    ports:
      - "8081:8080" # REST service
    volumes:
      - ./backend/socnet.yaml:/app/socnet.yaml
      - ./../../backend/frontend-demo:/app/frontend-demo
    command: ["./socnet"]
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - kafka
      - redis
    networks:
      - app_net

  socnet-2:
    container_name: socnet-2
    hostname: socnet-2
    build:
      context: ./../..
      dockerfile: environments/hw09/backend/Dockerfile
    ports:
      - "8082:8080" # REST service
    volumes:
      - ./backend/socnet.yaml:/app/socnet.yaml
      - ./../../backend/frontend-demo:/app/frontend-demo
    command: ["./socnet"]
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - kafka
      - redis
    networks:
      - app_net

  dialogs-1:
    container_name: dialogs-1
    hostname: dialogs-1
    build:
      context: ./../..
      dockerfile: environments/hw09/backend/Dockerfile
    ports:
      - "8083:8080" # REST service
    volumes:
      - ./backend/socnet.yaml:/app/socnet.yaml
    command: ["./dialogs"]
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - kafka
      - redis
    networks:
      - app_net

  dialogs-2:
    container_name: dialogs-2
    hostname: dialogs-2
    build:
      context: ./../..
      dockerfile: environments/hw09/backend/Dockerfile
    ports:
      - "8084:8080" # REST service
    volumes:
      - ./backend/socnet.yaml:/app/socnet.yaml
    command: ["./dialogs"]
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - kafka
      - redis
    networks:
      - app_net

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://app_hw:Passw0rd@postgres:5432/hw?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "9187:9187"
    command:
      - "--no-collector.stat_bgwriter"
    networks:
      - app_net
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - app_net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/configuration.tar.gz:/tmp/configuration.tar.gz
    depends_on:
      - prometheus
    networks:
      - app_net

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - "8085:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    privileged: true
    # depends_on:
    #   - postgres
    #   - postgres_slave1
    #   - postgres_slave2
    #   - backend
    networks:
      - app_net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app_net

  kafka:
    build: "./kafka"
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"    # для хоста
      - "9101:9101"    # JMX
      - "9102:9102"    # Prometheus metrics
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MZwa-fURSkiW8PG4ISQe8Q'  # Убедитесь, что это значение актуально
      KAFKA_OPTS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=9102:/etc/jmx-agent/prom-jmx-agent-config.yml"
    volumes:
      - kafka-data:/var/lib/kafka/data  # Для хранения данных
    networks:
      - app_net

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"  # Порт для Redis Exporter
    environment:
      REDIS_ADDR: "redis:6379"  # Адрес Redis сервера
    depends_on:
      - redis
    networks:
      - app_net

  tarantool:
    image: tarantool/tarantool:latest  # Используем последнюю версию Tarantool
    container_name: tarantool
    ports:
      - "3301:3301"  # Порт для подключения к Tarantool
    volumes:
      - ./tarantool/config.yaml:/opt/tarantool/default/config.yaml
      - ../../backend/tarantool/scripts/init.lua:/opt/tarantool/init.lua  # Монтируем каталог с Lua-скриптами
    environment:
      TARANTOOL_MEMORY: 1024M
      TARANTOOL_USER_NAME: "admin"
      TARANTOOL_USER_PASSWORD: "Passw0rd"
    command: ["tarantool", "/opt/tarantool/init.lua"]
    networks:
      - app_net

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
      - "8086:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - socnet-1
      - socnet-2
      - dialogs-1
      - dialogs-2
    networks:
      app_net:
        aliases:
          - dialogs
          - socnet

  haproxy:
    image: haproxy:latest
    container_name: haproxy
    ports:
      - "8404:8404"  # Порт для статистики HAProxy
      - "5433:5432"  # Порт для подключения к PostgreSQL через HAProxy
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      postgres_slave1:
        condition: service_healthy      
      postgres_slave2:
        condition: service_healthy      
    networks:
      app_net:
        aliases:
          - postgres-slaves

volumes:
  postgres-data:
  grafana-data:
  prometheus-data:
  redis-data:
  kafka-data:
  postgres-slave1-data:
  postgres-slave2-data:

networks:
  app_net:
    driver: bridge