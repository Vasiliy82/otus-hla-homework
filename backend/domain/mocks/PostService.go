// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Vasiliy82/otus-hla-homework/domain"
	mock "github.com/stretchr/testify/mock"
)

// PostService is an autogenerated mock type for the PostService type
type PostService struct {
	mock.Mock
}

// Create provides a mock function with given fields: userId, message
func (_m *PostService) Create(userId domain.UserKey, message domain.PostMessage) (domain.PostKey, error) {
	ret := _m.Called(userId, message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.PostKey
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostMessage) (domain.PostKey, error)); ok {
		return rf(userId, message)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostMessage) domain.PostKey); ok {
		r0 = rf(userId, message)
	} else {
		r0 = ret.Get(0).(domain.PostKey)
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey, domain.PostMessage) error); ok {
		r1 = rf(userId, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId, postId
func (_m *PostService) Delete(userId domain.UserKey, postId domain.PostKey) error {
	ret := _m.Called(userId, postId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostKey) error); ok {
		r0 = rf(userId, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: userId, postId
func (_m *PostService) Get(userId domain.UserKey, postId domain.PostKey) (*domain.Post, error) {
	ret := _m.Called(userId, postId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostKey) (*domain.Post, error)); ok {
		return rf(userId, postId)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostKey) *domain.Post); ok {
		r0 = rf(userId, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey, domain.PostKey) error); ok {
		r1 = rf(userId, postId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeed provides a mock function with given fields: userId, limit, lastPostId
func (_m *PostService) GetFeed(userId domain.UserKey, limit int, lastPostId domain.PostKey) ([]*domain.Post, error) {
	ret := _m.Called(userId, limit, lastPostId)

	if len(ret) == 0 {
		panic("no return value specified for GetFeed")
	}

	var r0 []*domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, int, domain.PostKey) ([]*domain.Post, error)); ok {
		return rf(userId, limit, lastPostId)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey, int, domain.PostKey) []*domain.Post); ok {
		r0 = rf(userId, limit, lastPostId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey, int, domain.PostKey) error); ok {
		r1 = rf(userId, limit, lastPostId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: userId, limit, lastPostId
func (_m *PostService) List(userId domain.UserKey, limit int, lastPostId domain.PostKey) ([]*domain.Post, error) {
	ret := _m.Called(userId, limit, lastPostId)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, int, domain.PostKey) ([]*domain.Post, error)); ok {
		return rf(userId, limit, lastPostId)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey, int, domain.PostKey) []*domain.Post); ok {
		r0 = rf(userId, limit, lastPostId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey, int, domain.PostKey) error); ok {
		r1 = rf(userId, limit, lastPostId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: userId, postId, newMessage
func (_m *PostService) Update(userId domain.UserKey, postId domain.PostKey, newMessage domain.PostMessage) error {
	ret := _m.Called(userId, postId, newMessage)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.PostKey, domain.PostMessage) error); ok {
		r0 = rf(userId, postId, newMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostService creates a new instance of PostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostService {
	mock := &PostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
