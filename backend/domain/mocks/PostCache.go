// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Vasiliy82/otus-hla-homework/domain"
	mock "github.com/stretchr/testify/mock"
)

// PostCache is an autogenerated mock type for the PostCache type
type PostCache struct {
	mock.Mock
}

// GetFeed provides a mock function with given fields: userId, limit
func (_m *PostCache) GetFeed(userId domain.UserKey, limit int) ([]*domain.Post, error) {
	ret := _m.Called(userId, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetFeed")
	}

	var r0 []*domain.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, int) ([]*domain.Post, error)); ok {
		return rf(userId, limit)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey, int) []*domain.Post); ok {
		r0 = rf(userId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey, int) error); ok {
		r1 = rf(userId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeed provides a mock function with given fields: userId, posts
func (_m *PostCache) UpdateFeed(userId domain.UserKey, posts []*domain.Post) error {
	ret := _m.Called(userId, posts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, []*domain.Post) error); ok {
		r0 = rf(userId, posts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostCache creates a new instance of PostCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostCache {
	mock := &PostCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
