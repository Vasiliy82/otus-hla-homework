// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/Vasiliy82/otus-hla-homework/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AddFriend provides a mock function with given fields: my_id, friend_id
func (_m *UserRepository) AddFriend(my_id domain.UserKey, friend_id domain.UserKey) error {
	ret := _m.Called(my_id, friend_id)

	if len(ret) == 0 {
		panic("no return value specified for AddFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.UserKey) error); ok {
		r0 = rf(my_id, friend_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *UserRepository) GetByID(id domain.UserKey) (*domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.UserKey) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(domain.UserKey) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.UserKey) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *UserRepository) GetByUsername(username string) (*domain.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: user
func (_m *UserRepository) RegisterUser(user *domain.User) (domain.UserKey, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 domain.UserKey
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (domain.UserKey, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) domain.UserKey); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(domain.UserKey)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFriend provides a mock function with given fields: my_id, friend_id
func (_m *UserRepository) RemoveFriend(my_id domain.UserKey, friend_id domain.UserKey) error {
	ret := _m.Called(my_id, friend_id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.UserKey, domain.UserKey) error); ok {
		r0 = rf(my_id, friend_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: firstName, lastName
func (_m *UserRepository) Search(firstName string, lastName string) ([]*domain.User, error) {
	ret := _m.Called(firstName, lastName)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*domain.User, error)); ok {
		return rf(firstName, lastName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*domain.User); ok {
		r0 = rf(firstName, lastName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(firstName, lastName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
