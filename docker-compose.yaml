services:
  postgres:
    build:
      context: ./misc/postgres
    container_name: postgres
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "hw"
    ports:
      - "5432:5432"
    volumes:
      - ./misc/load-tests:/load-tests
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_hw -d hw"]
      interval: 1s
      timeout: 5s
      retries: 50

  devbackend:
    container_name: devbackend
    build:
      context: ./backend
      dockerfile: ./../misc/devbackend/Dockerfile
    environment:
      POSTGRES_USER: "app_hw"
      POSTGRES_PASSWORD: "Passw0rd"
      POSTGRES_DB: "hw"
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    ports:
      - "8080:8080" # REST service
      - "2345:2345" # Remote debug (delve)
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy

  devfrontend:
    container_name: devfrontend
    build:
      context: ./frontend
      dockerfile: ./../misc/devfrontend/Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
    environment:
      CHOKIDAR_USEPOLLING: "true"

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://app_hw:Passw0rd@postgres:5432/hw?sslmode=disable"
    depends_on:
      - postgres
    ports:
      - "9187:9187"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./misc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - postgres-exporter

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    privileged: true
    depends_on:
      - postgres
      - devbackend
      - devfrontend

volumes:
  db-data:
  grafana_data:
